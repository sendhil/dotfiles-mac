#  NOTE(koekeishiya): A list of all built-in modifier and literal keywords can
#                     be found at https://github.com/koekeishiya/skhd/issues/1
#
#                     A hotkey is written according to the following rules:
#
#                       hotkey       = <mode> '<' <action> | <action>
#
#                       mode         = 'name of mode' | <mode> ',' <mode>
#
#                       action       = <keysym> '[' <proc_map_lst> ']' | <keysym> '->' '[' <proc_map_lst> ']'
#                                      <keysym> ':' <command>          | <keysym> '->' ':' <command>
#                                      <keysym> ';' <mode>             | <keysym> '->' ';' <mode>
#
#                       keysym       = <mod> '-' <key> | <key>
#
#                       mod          = 'modifier keyword' | <mod> '+' <mod>
#
#                       key          = <literal> | <keycode>
#
#                       literal      = 'single letter or built-in keyword'
#
#                       keycode      = 'apple keyboard kVK_<Key> values (0x3C)'
#
#                       proc_map_lst = * <proc_map>
#
#                       proc_map     = <string> ':' <command> | <string>     '~' |
#                                      '*'      ':' <command> | '*'          '~'
#
#                       string       = '"' 'sequence of characters' '"'
#
#                       command      = command is executed through '$SHELL -c' and
#                                      follows valid shell syntax. if the $SHELL environment
#                                      variable is not set, it will default to '/bin/bash'.
#                                      when bash is used, the ';' delimeter can be specified
#                                      to chain commands.
#
#                                      to allow a command to extend into multiple lines,
#                                      prepend '\' at the end of the previous line.
#
#                                      an EOL character signifies the end of the bind.
#
#                       ->           = keypress is not consumed by skhd
#
#                       *            = matches every application not specified in <proc_map_lst>
#
#                       ~            = application is unbound and keypress is forwarded per usual, when specified in a <proc_map>
#
#  NOTE(koekeishiya): A mode is declared according to the following rules:
#
#                       mode_decl = '::' <name> '@' ':' <command> | '::' <name> ':' <command> |
#                                   '::' <name> '@'               | '::' <name>
#
#                       name      = desired name for this mode,
#
#                       @         = capture keypresses regardless of being bound to an action
#
#                       command   = command is executed through '$SHELL -c' and
#                                   follows valid shell syntax. if the $SHELL environment
#                                   variable is not set, it will default to '/bin/bash'.
#                                   when bash is used, the ';' delimeter can be specified
#                                   to chain commands.
#
#                                   to allow a command to extend into multiple lines,
#                                   prepend '\' at the end of the previous line.
#
#                                   an EOL character signifies the end of the bind.

# add an on_enter command to the default mode
# :: default : chunkc border::color 0xff775759
#
# defines a new mode 'test' with an on_enter command, that captures keypresses
# :: test @ : chunkc border::color 0xff24ccaa
#
# from 'default' mode, activate mode 'test'
# cmd - x ; test
#
# from 'test' mode, activate mode 'default'
# test < cmd - x ; default
#
# launch a new terminal instance when in either 'default' or 'test' mode
# default, test < cmd - return : open -na /Applications/Terminal.app

# application specific bindings
#
# cmd - n [
#     "kitty"       : echo "hello kitty"
#     *             : echo "hello everyone"
#     "qutebrowser" : echo "hello qutebrowser"
#     "terminal"    ~
#     "finder"      : false
# ]

# specify a file that should be included as an additional config-file.
# treated as an absolutepath if the filename begins with '/' otherwise
# the file is relative to the path of the config-file it was loaded from.
#
# .load "/Users/Koe/.config/partial_skhdrc"
# .load "partial_skhdrc"

# prevent skhd from monitoring events for specific applications.
#
# .blacklist [
#    "kitty"
#    "terminal"
#    "qutebrowser"
# ]

# open terminal, blazingly fast compared to iTerm/Hyper
alt - return : /Applications/Kitty.app/Contents/MacOS/kitty --single-instance -d ~

# open chrome
# cmd + shift - return : open -na "Google Chrome" --args --new-window

# # close focused window
shift + alt - q : yabai -m window --close
#
# focus window
# next/prev defined in stack section below so as to make things more consistent when using a stack
# alt - h : yabai -m window --focus west
alt - j : yabai -m window --focus south
alt - k : yabai -m window --focus north
# alt - l : yabai -m window --focus east

# Move/Warp Window
shift + alt - h : yabai -m window --warp west || yabai -m window --display west
shift + alt - j : yabai -m window --warp south || yabai -m window --display south
shift + alt - k : yabai -m window --warp north || yabai -m window --display north
shift + alt - l : yabai -m window --warp east || yabai -m window --display east

# Move/Swap Window
ctrl + alt - h : yabai -m window --swap west || yabai -m window --display west
ctrl + alt - j : yabai -m window --swap south || yabai -m window --display south
ctrl + alt - k : yabai -m window --swap north || yabai -m window --display north
ctrl + alt - l : yabai -m window --swap east || yabai -m window --display east

hyper - f13 : python3 -m yabai_navigation_utilities swap-displays 1 2

# insertion points for new container - h/t https://cbrgm.net/post/2021-05-5-setup-macos/
# shift + alt - left : yabai -m window --insert west
# shift + alt - down : yabai -m window --insert south
# shift + alt - up : yabai -m window --insert north
# shift + alt - right : yabai -m window --insert east
#

# Alternate Move to Space
# This is a workaround based on a combo of the script which tries to focus on a window within the space,
# and if not it falls back to the MacOS shortcut to switch to the space. The reason for the workaround 
# is without SIP disabled, yabai can't focus on a space, but it can focus on a window. In the case that I'm
# trying to switch to a space without a window the MacOS fallback kicks in. This also adds the perk of being
# able to focus between multiple monitors.
alt - 1: skhd -k "shift + alt + ctrl - 1" && yabai-navigation-utilities focus 1
alt - 2: skhd -k "shift + alt + ctrl - 2" && yabai-navigation-utilities focus 2
alt - 3: skhd -k "shift + alt + ctrl - 3" && yabai-navigation-utilities focus 3
alt - 4: skhd -k "shift + alt + ctrl - 4" && yabai-navigation-utilities focus 4
alt - 5: skhd -k "shift + alt + ctrl - 5" && yabai-navigation-utilities focus 5
alt - 6: skhd -k "shift + alt + ctrl - 6" && yabai-navigation-utilities focus 6
alt - 7: skhd -k "shift + alt + ctrl - 7" && yabai-navigation-utilities focus 7
alt - 8: skhd -k "shift + alt + ctrl - 8" && yabai-navigation-utilities focus 8
alt - 9: skhd -k "shift + alt + ctrl - 9" && yabai-navigation-utilities focus 9
alt - 0: skhd -k "shift + alt + ctrl - 0" && yabai-navigation-utilities focus 0
alt - 0x1B: yabai-navigation-utilities focus 11

# This adjusts to an alt-tab experience which leans on yabai a little bit more 
# as I find it to be more reliable than built in MacOS alt-tab. 
alt - tab: yabai-navigation-utilities recent-space

# Send Window to Space (Shift + Alt + [NUM])
shift + alt - 1: yabai -m window --space 1
shift + alt - 2: yabai -m window --space 2
shift + alt - 3: yabai -m window --space 3
shift + alt - 4: yabai -m window --space 4
shift + alt - 5: yabai -m window --space 5
shift + alt - 6: yabai -m window --space 6
shift + alt - 7: yabai -m window --space 7
shift + alt - 8: yabai -m window --space 8
shift + alt - 9: yabai -m window --space 9
shift + alt - 0: yabai -m window --space 10
# 0x1B is `-`
shift + alt - 0x1B: yabai -m window --space 11

# Fake Scratch Window Commands
# 0x33 is Backspace
alt - 0x33: yabai-navigation-utilities toggle
shift + alt - 0x33: yabai-navigation-utilities store | jq 'if .result == "added_window" then "Added Window" else "Removed Window" end' | xargs -n 1 -I {} hs -c 'hs.alert.show("{}", 2)'
cmd + shift + alt - 0x33 : yabai-navigation-utilities list-scratch-windows | jq '.[] | .app' | xargs -n 1 -I {} hs -c 'hs.alert.show("{}", 2)'

# Balance
shift + alt - 0x18: yabai -m space --balance

# Reload
alt + shift - r : launchctl kickstart -k "gui/${UID}/homebrew.mxcl.yabai"

# Stack Related
alt - s : yabai -m space --layout "$(yabai -m query --spaces --space | jq -r 'if .type == "bsp" then "stack" else "bsp" end')"

alt - h : yabai-stack-navigator --prev
alt - l : yabai-stack-navigator --next

# Toggle Split

alt - e : yabai -m window --toggle split

# Next/Prev inspired from - https://anuj-chandra.medium.com/using-i3-like-tiling-window-managers-in-macos-with-yabai-ebf0e002b992

# Next
# alt - h : yabai -m query --spaces --space \
#   | jq -re ".index" \
#   | xargs -I{} yabai -m query --windows --space {} \
#   | jq -sre "add | map(select(.minimized != 1)) | sort_by(.display, .frame.y, .frame.x, .id) | reverse | nth(index(map(select(.focused == 1))) - 1).id" \
#   | xargs -I{} yabai -m window --focus {}

# # Prev
# alt - l : yabai -m query --spaces --space \
#   | jq -re ".index" \
#   | xargs -I{} yabai -m query --windows --space {} \
#   | jq -sre "add | map(select(.minimized != 1)) | sort_by(.display, .frame.y, .frame.y, .id) | nth(index(map(select(.focused == 1))) - 1).id" \
#   | xargs -I{} yabai -m window --focus {}


# Fullscreen
alt - f : yabai -m window --toggle zoom-fullscreen

# Float
alt + shift - space: yabai -m window --toggle float && yabai -m window --grid 10:10:1:1:8:8

# cmd - j : chunkc tiling::window --focus prev
# cmd - k : chunkc tiling::window --focus next
#
# # equalize size of windows
# shift + alt - 0 : chunkc tiling::desktop --equalize
#
# # swap window
# shift + alt - h : chunkc tiling::window --swap west
# shift + alt - j : chunkc tiling::window --swap south
# shift + alt - k : chunkc tiling::window --swap north
# shift + alt - l : chunkc tiling::window --swap east
#
# # move window
# shift + cmd - h : chunkc tiling::window --warp west
# shift + cmd - j : chunkc tiling::window --warp south
# shift + cmd - k : chunkc tiling::window --warp north
# shift + cmd - l : chunkc tiling::window --warp east
#
# # make floating window fill screen
# shift + alt - up     : chunkc tiling::window --grid-layout 1:1:0:0:1:1
#
# # make floating window fill left-half of screen
# shift + alt - left   : chunkc tiling::window --grid-layout 1:2:0:0:1:1
#
# # make floating window fill right-half of screen
# shift + alt - right  : chunkc tiling::window --grid-layout 1:2:1:0:1:1
#
# # create desktop, move window and follow focus
# shift + cmd - n : chunkc tiling::desktop --create;\
#                   id=$(chunkc tiling::query --desktops-for-monitor $(chunkc tiling::query --monitor-for-desktop $(chunkc tiling::query --desktop id)));\
#                   chunkc tiling::window --send-to-desktop $(echo ${id##* });\
#                   chunkc tiling::desktop --focus $(echo ${id##* })
#
# # create desktop and follow focus
# cmd + alt - n : chunkc tiling::desktop --create;\
#                 id=$(chunkc tiling::query --desktops-for-monitor $(chunkc tiling::query --monitor-for-desktop $(chunkc tiling::query --desktop id)));\
#                 chunkc tiling::desktop --focus $(echo ${id##* })
# # destroy desktop
# cmd + alt - w : chunkc tiling::desktop --annihilate
#
# # fast focus desktop
# cmd + alt - x : chunkc tiling::desktop --focus $(chunkc get _last_active_desktop)
# cmd + alt - z : chunkc tiling::desktop --focus prev
# cmd + alt - c : chunkc tiling::desktop --focus next
# cmd + alt - 1 : chunkc tiling::desktop --focus 1
# cmd + alt - 2 : chunkc tiling::desktop --focus 2
# cmd + alt - 3 : chunkc tiling::desktop --focus 3
# cmd + alt - 4 : chunkc tiling::desktop --focus 4
# cmd + alt - 5 : chunkc tiling::desktop --focus 5
# cmd + alt - 6 : chunkc tiling::desktop --focus 6
# cmd + alt - 7 : chunkc tiling::desktop --focus 7
# cmd + alt - 8 : chunkc tiling::desktop --focus 8
# cmd + alt - 9 : chunkc tiling::desktop --focus 9
# cmd + alt - 0 : chunkc tiling::desktop --focus 10
#
#
#
# # send window to desktop and follow focus
# shift + cmd - x : chunkc tiling::window --send-to-desktop $(chunkc get _last_active_desktop); chunkc tiling::desktop --focus $(chunkc get _last_active_desktop)
# shift + cmd - z : chunkc tiling::window --send-to-desktop prev; chunkc tiling::desktop --focus prev
# shift + cmd - c : chunkc tiling::window --send-to-desktop next; chunkc tiling::desktop --focus next
# shift + cmd - 1 : chunkc tiling::window --send-to-desktop 1; chunkc tiling::desktop --focus 1
# shift + cmd - 2 : chunkc tiling::window --send-to-desktop 2; chunkc tiling::desktop --focus 2
# shift + cmd - 3 : chunkc tiling::window --send-to-desktop 3; chunkc tiling::desktop --focus 3
# shift + cmd - 4 : chunkc tiling::window --send-to-desktop 4; chunkc tiling::desktop --focus 4
# shift + cmd - 5 : chunkc tiling::window --send-to-desktop 5; chunkc tiling::desktop --focus 5
# shift + cmd - 6 : chunkc tiling::window --send-to-desktop 6; chunkc tiling::desktop --focus 6
# shift + cmd - 7 : chunkc tiling::window --send-to-desktop 7; chunkc tiling::desktop --focus 7
# shift + cmd - 8 : chunkc tiling::window --send-to-desktop 8; chunkc tiling::desktop --focus 8
# shift + cmd - 9 : chunkc tiling::window --send-to-desktop 9; chunkc tiling::desktop --focus 9
# shift + cmd - 0 : chunkc tiling::window --send-to-desktop 10; chunkc tiling::desktop --focus 10
#
# # focus monitor
# ctrl + alt - z  : chunkc tiling::monitor -f prev
# ctrl + alt - c  : chunkc tiling::monitor -f next
# ctrl + alt - 1  : chunkc tiling::monitor -f 1
# ctrl + alt - 2  : chunkc tiling::monitor -f 2
# ctrl + alt - 3  : chunkc tiling::monitor -f 3
#
# # send window to monitor and follow focus
# ctrl + cmd - z  : chunkc tiling::window --send-to-monitor prev; chunkc tiling::monitor -f prev
# ctrl + cmd - c  : chunkc tiling::window --send-to-monitor next; chunkc tiling::monitor -f next
# ctrl + cmd - 1  : chunkc tiling::window --send-to-monitor 1; chunkc tiling::monitor -f 1
# ctrl + cmd - 2  : chunkc tiling::window --send-to-monitor 2; chunkc tiling::monitor -f 2
# ctrl + cmd - 3  : chunkc tiling::window --send-to-monitor 3; chunkc tiling::monitor -f 3
#
# # increase region size
# shift + alt - a : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge west
# shift + alt - s : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge south
# shift + alt - w : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge north
# shift + alt - d : chunkc tiling::window --use-temporary-ratio 0.1 --adjust-window-edge east
#
# # decrease region size
# shift + cmd - a : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge west
# shift + cmd - s : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge south
# shift + cmd - w : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge north
# shift + cmd - d : chunkc tiling::window --use-temporary-ratio -0.1 --adjust-window-edge east
#
# # set insertion point for focused container
# ctrl + alt - f : chunkc tiling::window --use-insertion-point cancel
# ctrl + alt - h : chunkc tiling::window --use-insertion-point west
# ctrl + alt - j : chunkc tiling::window --use-insertion-point south
# ctrl + alt - k : chunkc tiling::window --use-insertion-point north
# ctrl + alt - l : chunkc tiling::window --use-insertion-point east
#
# # rotate tree
# alt - r : chunkc tiling::desktop --rotate 90
#
# # mirror tree y-axis
# alt - y : chunkc tiling::desktop --mirror vertical
#
# # mirror tree x-axis
# alt - x : chunkc tiling::desktop --mirror horizontal
#
# # toggle desktop offset
# alt - a : chunkc tiling::desktop --toggle offset
#
# # toggle window fullscreen
# alt - f : chunkc tiling::window --toggle fullscreen
#
# # toggle window native fullscreen
# shift + alt - f : chunkc tiling::window --toggle native-fullscreen
#
# # toggle window parent zoom
# alt - d : chunkc tiling::window --toggle parent
#
# # toggle window split type
# alt - e : chunkc tiling::window --toggle split
#
# # toggle window fade
# alt - q : chunkc tiling::window --toggle fade
#
# # float / unfloat window and center on screen
# alt - t : chunkc tiling::window --toggle float;\
#           chunkc tiling::window --grid-layout 4:4:1:1:2:2
#
# # toggle sticky
# alt - s : chunkc tiling::window --toggle sticky
#
# # toggle sticky, float and resize to picture-in-picture size
# alt - p : chunkc tiling::window --toggle sticky;\
#           chunkc tiling::window --grid-layout 5:5:4:0:1:1
#
# # float next window to be tiled
# shift + alt - t : chunkc set window_float_next 1
#
# # change layout of desktop
# ctrl + alt - a : chunkc tiling::desktop --layout bsp
# ctrl + alt - s : chunkc tiling::desktop --layout monocle
# ctrl + alt - d : chunkc tiling::desktop --layout float
#
# ctrl + alt - w : chunkc tiling::desktop --deserialize ~/.chunkwm_layouts/dev_1
